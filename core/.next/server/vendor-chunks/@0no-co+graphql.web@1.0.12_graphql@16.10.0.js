/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@0no-co+graphql.web@1.0.12_graphql@16.10.0";
exports.ids = ["vendor-chunks/@0no-co+graphql.web@1.0.12_graphql@16.10.0"];
exports.modules = {

/***/ "(action-browser)/../node_modules/.pnpm/@0no-co+graphql.web@1.0.12_graphql@16.10.0/node_modules/@0no-co/graphql.web/dist/graphql.web.js":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@0no-co+graphql.web@1.0.12_graphql@16.10.0/node_modules/@0no-co/graphql.web/dist/graphql.web.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: !0\n}));\n\nclass GraphQLError extends Error {\n  constructor(e, r, n, i, t, a, o) {\n    super(e);\n    this.name = \"GraphQLError\";\n    this.message = e;\n    if (t) {\n      this.path = t;\n    }\n    if (r) {\n      this.nodes = Array.isArray(r) ? r : [ r ];\n    }\n    if (n) {\n      this.source = n;\n    }\n    if (i) {\n      this.positions = i;\n    }\n    if (a) {\n      this.originalError = a;\n    }\n    var l = o;\n    if (!l && a) {\n      var u = a.extensions;\n      if (u && \"object\" == typeof u) {\n        l = u;\n      }\n    }\n    this.extensions = l || {};\n  }\n  toJSON() {\n    return {\n      ...this,\n      message: this.message\n    };\n  }\n  toString() {\n    return this.message;\n  }\n  get [Symbol.toStringTag]() {\n    return \"GraphQLError\";\n  }\n}\n\nvar e;\n\nvar r;\n\nfunction error(e) {\n  return new GraphQLError(`Syntax Error: Unexpected token at ${r} in ${e}`);\n}\n\nfunction advance(n) {\n  n.lastIndex = r;\n  if (n.test(e)) {\n    return e.slice(r, r = n.lastIndex);\n  }\n}\n\nvar n = / +(?=[^\\s])/y;\n\nfunction blockString(e) {\n  var r = e.split(\"\\n\");\n  var i = \"\";\n  var t = 0;\n  var a = 0;\n  var o = r.length - 1;\n  for (var l = 0; l < r.length; l++) {\n    n.lastIndex = 0;\n    if (n.test(r[l])) {\n      if (l && (!t || n.lastIndex < t)) {\n        t = n.lastIndex;\n      }\n      a = a || l;\n      o = l;\n    }\n  }\n  for (var u = a; u <= o; u++) {\n    if (u !== a) {\n      i += \"\\n\";\n    }\n    i += r[u].slice(t).replace(/\\\\\"\"\"/g, '\"\"\"');\n  }\n  return i;\n}\n\nfunction ignored() {\n  for (var n = 0 | e.charCodeAt(r++); 9 === n || 10 === n || 13 === n || 32 === n || 35 === n || 44 === n || 65279 === n; n = 0 | e.charCodeAt(r++)) {\n    if (35 === n) {\n      while (10 !== (n = e.charCodeAt(r++)) && 13 !== n) {}\n    }\n  }\n  r--;\n}\n\nvar i = /[_A-Za-z]\\w*/y;\n\nvar t = new RegExp(\"(?:(null|true|false)|\\\\$(\" + i.source + ')|(-?\\\\d+)((?:\\\\.\\\\d+)?[eE][+-]?\\\\d+|\\\\.\\\\d+)?|(\"\"\"(?:\"\"\"|(?:[\\\\s\\\\S]*?[^\\\\\\\\])\"\"\"))|(\"(?:\"|[^\\\\r\\\\n]*?[^\\\\\\\\]\"))|(' + i.source + \"))\", \"y\");\n\nvar a = function(e) {\n  e[e.Const = 1] = \"Const\";\n  e[e.Var = 2] = \"Var\";\n  e[e.Int = 3] = \"Int\";\n  e[e.Float = 4] = \"Float\";\n  e[e.BlockString = 5] = \"BlockString\";\n  e[e.String = 6] = \"String\";\n  e[e.Enum = 7] = \"Enum\";\n  return e;\n}(a || {});\n\nvar o = /\\\\/;\n\nfunction value(n) {\n  var l;\n  var u;\n  t.lastIndex = r;\n  if (91 === e.charCodeAt(r)) {\n    r++;\n    ignored();\n    var d = [];\n    while (93 !== e.charCodeAt(r)) {\n      d.push(value(n));\n    }\n    r++;\n    ignored();\n    return {\n      kind: \"ListValue\",\n      values: d\n    };\n  } else if (123 === e.charCodeAt(r)) {\n    r++;\n    ignored();\n    var s = [];\n    while (125 !== e.charCodeAt(r)) {\n      if (null == (l = advance(i))) {\n        throw error(\"ObjectField\");\n      }\n      ignored();\n      if (58 !== e.charCodeAt(r++)) {\n        throw error(\"ObjectField\");\n      }\n      ignored();\n      s.push({\n        kind: \"ObjectField\",\n        name: {\n          kind: \"Name\",\n          value: l\n        },\n        value: value(n)\n      });\n    }\n    r++;\n    ignored();\n    return {\n      kind: \"ObjectValue\",\n      fields: s\n    };\n  } else if (null != (u = t.exec(e))) {\n    r = t.lastIndex;\n    ignored();\n    if (null != (l = u[a.Const])) {\n      return \"null\" === l ? {\n        kind: \"NullValue\"\n      } : {\n        kind: \"BooleanValue\",\n        value: \"true\" === l\n      };\n    } else if (null != (l = u[a.Var])) {\n      if (n) {\n        throw error(\"Variable\");\n      } else {\n        return {\n          kind: \"Variable\",\n          name: {\n            kind: \"Name\",\n            value: l\n          }\n        };\n      }\n    } else if (null != (l = u[a.Int])) {\n      var v;\n      if (null != (v = u[a.Float])) {\n        return {\n          kind: \"FloatValue\",\n          value: l + v\n        };\n      } else {\n        return {\n          kind: \"IntValue\",\n          value: l\n        };\n      }\n    } else if (null != (l = u[a.BlockString])) {\n      return {\n        kind: \"StringValue\",\n        value: blockString(l.slice(3, -3)),\n        block: !0\n      };\n    } else if (null != (l = u[a.String])) {\n      return {\n        kind: \"StringValue\",\n        value: o.test(l) ? JSON.parse(l) : l.slice(1, -1),\n        block: !1\n      };\n    } else if (null != (l = u[a.Enum])) {\n      return {\n        kind: \"EnumValue\",\n        value: l\n      };\n    }\n  }\n  throw error(\"Value\");\n}\n\nfunction arguments_(n) {\n  if (40 === e.charCodeAt(r)) {\n    var t = [];\n    r++;\n    ignored();\n    var a;\n    do {\n      if (null == (a = advance(i))) {\n        throw error(\"Argument\");\n      }\n      ignored();\n      if (58 !== e.charCodeAt(r++)) {\n        throw error(\"Argument\");\n      }\n      ignored();\n      t.push({\n        kind: \"Argument\",\n        name: {\n          kind: \"Name\",\n          value: a\n        },\n        value: value(n)\n      });\n    } while (41 !== e.charCodeAt(r));\n    r++;\n    ignored();\n    return t;\n  }\n}\n\nfunction directives(n) {\n  if (64 === e.charCodeAt(r)) {\n    var t = [];\n    var a;\n    do {\n      r++;\n      if (null == (a = advance(i))) {\n        throw error(\"Directive\");\n      }\n      ignored();\n      t.push({\n        kind: \"Directive\",\n        name: {\n          kind: \"Name\",\n          value: a\n        },\n        arguments: arguments_(n)\n      });\n    } while (64 === e.charCodeAt(r));\n    return t;\n  }\n}\n\nfunction type() {\n  var n;\n  var t = 0;\n  while (91 === e.charCodeAt(r)) {\n    t++;\n    r++;\n    ignored();\n  }\n  if (null == (n = advance(i))) {\n    throw error(\"NamedType\");\n  }\n  ignored();\n  var a = {\n    kind: \"NamedType\",\n    name: {\n      kind: \"Name\",\n      value: n\n    }\n  };\n  do {\n    if (33 === e.charCodeAt(r)) {\n      r++;\n      ignored();\n      a = {\n        kind: \"NonNullType\",\n        type: a\n      };\n    }\n    if (t) {\n      if (93 !== e.charCodeAt(r++)) {\n        throw error(\"NamedType\");\n      }\n      ignored();\n      a = {\n        kind: \"ListType\",\n        type: a\n      };\n    }\n  } while (t--);\n  return a;\n}\n\nvar l = new RegExp(\"(?:(\\\\.{3})|(\" + i.source + \"))\", \"y\");\n\nvar u = function(e) {\n  e[e.Spread = 1] = \"Spread\";\n  e[e.Name = 2] = \"Name\";\n  return e;\n}(u || {});\n\nfunction selectionSet() {\n  var n = [];\n  var t;\n  var a;\n  do {\n    l.lastIndex = r;\n    if (null != (a = l.exec(e))) {\n      r = l.lastIndex;\n      if (null != a[u.Spread]) {\n        ignored();\n        var o = advance(i);\n        if (null != o && \"on\" !== o) {\n          ignored();\n          n.push({\n            kind: \"FragmentSpread\",\n            name: {\n              kind: \"Name\",\n              value: o\n            },\n            directives: directives(!1)\n          });\n        } else {\n          ignored();\n          if (\"on\" === o) {\n            if (null == (o = advance(i))) {\n              throw error(\"NamedType\");\n            }\n            ignored();\n          }\n          var d = directives(!1);\n          if (123 !== e.charCodeAt(r++)) {\n            throw error(\"InlineFragment\");\n          }\n          ignored();\n          n.push({\n            kind: \"InlineFragment\",\n            typeCondition: o ? {\n              kind: \"NamedType\",\n              name: {\n                kind: \"Name\",\n                value: o\n              }\n            } : void 0,\n            directives: d,\n            selectionSet: selectionSet()\n          });\n        }\n      } else if (null != (t = a[u.Name])) {\n        var s = void 0;\n        ignored();\n        if (58 === e.charCodeAt(r)) {\n          r++;\n          ignored();\n          s = t;\n          if (null == (t = advance(i))) {\n            throw error(\"Field\");\n          }\n          ignored();\n        }\n        var v = arguments_(!1);\n        ignored();\n        var c = directives(!1);\n        var f = void 0;\n        if (123 === e.charCodeAt(r)) {\n          r++;\n          ignored();\n          f = selectionSet();\n        }\n        n.push({\n          kind: \"Field\",\n          alias: s ? {\n            kind: \"Name\",\n            value: s\n          } : void 0,\n          name: {\n            kind: \"Name\",\n            value: t\n          },\n          arguments: v,\n          directives: c,\n          selectionSet: f\n        });\n      }\n    } else {\n      throw error(\"SelectionSet\");\n    }\n  } while (125 !== e.charCodeAt(r));\n  r++;\n  ignored();\n  return {\n    kind: \"SelectionSet\",\n    selections: n\n  };\n}\n\nfunction fragmentDefinition() {\n  var n;\n  var t;\n  if (null == (n = advance(i))) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  if (\"on\" !== advance(i)) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  if (null == (t = advance(i))) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  var a = directives(!1);\n  if (123 !== e.charCodeAt(r++)) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  return {\n    kind: \"FragmentDefinition\",\n    name: {\n      kind: \"Name\",\n      value: n\n    },\n    typeCondition: {\n      kind: \"NamedType\",\n      name: {\n        kind: \"Name\",\n        value: t\n      }\n    },\n    directives: a,\n    selectionSet: selectionSet()\n  };\n}\n\nvar d = /(?:query|mutation|subscription|fragment)/y;\n\nfunction operationDefinition(n) {\n  var t;\n  var a;\n  var o;\n  if (n) {\n    ignored();\n    t = advance(i);\n    a = function variableDefinitions() {\n      ignored();\n      if (40 === e.charCodeAt(r)) {\n        var n = [];\n        r++;\n        ignored();\n        var t;\n        do {\n          if (36 !== e.charCodeAt(r++)) {\n            throw error(\"Variable\");\n          }\n          if (null == (t = advance(i))) {\n            throw error(\"Variable\");\n          }\n          ignored();\n          if (58 !== e.charCodeAt(r++)) {\n            throw error(\"VariableDefinition\");\n          }\n          ignored();\n          var a = type();\n          var o = void 0;\n          if (61 === e.charCodeAt(r)) {\n            r++;\n            ignored();\n            o = value(!0);\n          }\n          ignored();\n          n.push({\n            kind: \"VariableDefinition\",\n            variable: {\n              kind: \"Variable\",\n              name: {\n                kind: \"Name\",\n                value: t\n              }\n            },\n            type: a,\n            defaultValue: o,\n            directives: directives(!0)\n          });\n        } while (41 !== e.charCodeAt(r));\n        r++;\n        ignored();\n        return n;\n      }\n    }();\n    o = directives(!1);\n  }\n  if (123 === e.charCodeAt(r)) {\n    r++;\n    ignored();\n    return {\n      kind: \"OperationDefinition\",\n      operation: n || \"query\",\n      name: t ? {\n        kind: \"Name\",\n        value: t\n      } : void 0,\n      variableDefinitions: a,\n      directives: o,\n      selectionSet: selectionSet()\n    };\n  }\n}\n\nvar s = {};\n\nfunction mapJoin(e, r, n) {\n  var i = \"\";\n  for (var t = 0; t < e.length; t++) {\n    if (t) {\n      i += r;\n    }\n    i += n(e[t]);\n  }\n  return i;\n}\n\nfunction printString(e) {\n  return JSON.stringify(e);\n}\n\nfunction printBlockString(e) {\n  return '\"\"\"\\n' + e.replace(/\"\"\"/g, '\\\\\"\"\"') + '\\n\"\"\"';\n}\n\nvar v = \"\\n\";\n\nvar c = {\n  OperationDefinition(e) {\n    var r = e.operation;\n    if (e.name) {\n      r += \" \" + e.name.value;\n    }\n    if (e.variableDefinitions && e.variableDefinitions.length) {\n      if (!e.name) {\n        r += \" \";\n      }\n      r += \"(\" + mapJoin(e.variableDefinitions, \", \", c.VariableDefinition) + \")\";\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return \"query\" !== r ? r + \" \" + c.SelectionSet(e.selectionSet) : c.SelectionSet(e.selectionSet);\n  },\n  VariableDefinition(e) {\n    var r = c.Variable(e.variable) + \": \" + _print(e.type);\n    if (e.defaultValue) {\n      r += \" = \" + _print(e.defaultValue);\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return r;\n  },\n  Field(e) {\n    var r = e.alias ? e.alias.value + \": \" + e.name.value : e.name.value;\n    if (e.arguments && e.arguments.length) {\n      var n = mapJoin(e.arguments, \", \", c.Argument);\n      if (r.length + n.length + 2 > 80) {\n        r += \"(\" + (v += \"  \") + mapJoin(e.arguments, v, c.Argument) + (v = v.slice(0, -2)) + \")\";\n      } else {\n        r += \"(\" + n + \")\";\n      }\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    if (e.selectionSet && e.selectionSet.selections.length) {\n      r += \" \" + c.SelectionSet(e.selectionSet);\n    }\n    return r;\n  },\n  StringValue(e) {\n    if (e.block) {\n      return printBlockString(e.value).replace(/\\n/g, v);\n    } else {\n      return printString(e.value);\n    }\n  },\n  BooleanValue: e => \"\" + e.value,\n  NullValue: e => \"null\",\n  IntValue: e => e.value,\n  FloatValue: e => e.value,\n  EnumValue: e => e.value,\n  Name: e => e.value,\n  Variable: e => \"$\" + e.name.value,\n  ListValue: e => \"[\" + mapJoin(e.values, \", \", _print) + \"]\",\n  ObjectValue: e => \"{\" + mapJoin(e.fields, \", \", c.ObjectField) + \"}\",\n  ObjectField: e => e.name.value + \": \" + _print(e.value),\n  Document(e) {\n    if (!e.definitions || !e.definitions.length) {\n      return \"\";\n    }\n    return mapJoin(e.definitions, \"\\n\\n\", _print);\n  },\n  SelectionSet: e => \"{\" + (v += \"  \") + mapJoin(e.selections, v, _print) + (v = v.slice(0, -2)) + \"}\",\n  Argument: e => e.name.value + \": \" + _print(e.value),\n  FragmentSpread(e) {\n    var r = \"...\" + e.name.value;\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return r;\n  },\n  InlineFragment(e) {\n    var r = \"...\";\n    if (e.typeCondition) {\n      r += \" on \" + e.typeCondition.name.value;\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return r += \" \" + c.SelectionSet(e.selectionSet);\n  },\n  FragmentDefinition(e) {\n    var r = \"fragment \" + e.name.value;\n    r += \" on \" + e.typeCondition.name.value;\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return r + \" \" + c.SelectionSet(e.selectionSet);\n  },\n  Directive(e) {\n    var r = \"@\" + e.name.value;\n    if (e.arguments && e.arguments.length) {\n      r += \"(\" + mapJoin(e.arguments, \", \", c.Argument) + \")\";\n    }\n    return r;\n  },\n  NamedType: e => e.name.value,\n  ListType: e => \"[\" + _print(e.type) + \"]\",\n  NonNullType: e => _print(e.type) + \"!\"\n};\n\nvar _print = e => c[e.kind](e);\n\nfunction valueFromASTUntyped(e, r) {\n  switch (e.kind) {\n   case \"NullValue\":\n    return null;\n\n   case \"IntValue\":\n    return parseInt(e.value, 10);\n\n   case \"FloatValue\":\n    return parseFloat(e.value);\n\n   case \"StringValue\":\n   case \"EnumValue\":\n   case \"BooleanValue\":\n    return e.value;\n\n   case \"ListValue\":\n    var n = [];\n    for (var i = 0, t = e.values.length; i < t; i++) {\n      n.push(valueFromASTUntyped(e.values[i], r));\n    }\n    return n;\n\n   case \"ObjectValue\":\n    var a = Object.create(null);\n    for (var o = 0, l = e.fields.length; o < l; o++) {\n      var u = e.fields[o];\n      a[u.name.value] = valueFromASTUntyped(u.value, r);\n    }\n    return a;\n\n   case \"Variable\":\n    return r && r[e.name.value];\n  }\n}\n\nexports.BREAK = s;\n\nexports.GraphQLError = GraphQLError;\n\nexports.Kind = {\n  NAME: \"Name\",\n  DOCUMENT: \"Document\",\n  OPERATION_DEFINITION: \"OperationDefinition\",\n  VARIABLE_DEFINITION: \"VariableDefinition\",\n  SELECTION_SET: \"SelectionSet\",\n  FIELD: \"Field\",\n  ARGUMENT: \"Argument\",\n  FRAGMENT_SPREAD: \"FragmentSpread\",\n  INLINE_FRAGMENT: \"InlineFragment\",\n  FRAGMENT_DEFINITION: \"FragmentDefinition\",\n  VARIABLE: \"Variable\",\n  INT: \"IntValue\",\n  FLOAT: \"FloatValue\",\n  STRING: \"StringValue\",\n  BOOLEAN: \"BooleanValue\",\n  NULL: \"NullValue\",\n  ENUM: \"EnumValue\",\n  LIST: \"ListValue\",\n  OBJECT: \"ObjectValue\",\n  OBJECT_FIELD: \"ObjectField\",\n  DIRECTIVE: \"Directive\",\n  NAMED_TYPE: \"NamedType\",\n  LIST_TYPE: \"ListType\",\n  NON_NULL_TYPE: \"NonNullType\"\n};\n\nexports.OperationTypeNode = {\n  QUERY: \"query\",\n  MUTATION: \"mutation\",\n  SUBSCRIPTION: \"subscription\"\n};\n\nexports.Source = function Source(e, r, n) {\n  return {\n    body: e,\n    name: r,\n    locationOffset: n || {\n      line: 1,\n      column: 1\n    }\n  };\n};\n\nexports.isSelectionNode = function isSelectionNode(e) {\n  return \"Field\" === e.kind || \"FragmentSpread\" === e.kind || \"InlineFragment\" === e.kind;\n};\n\nexports.parse = function parse(n, i) {\n  r = 0;\n  return function document(e, n) {\n    var i;\n    var t;\n    ignored();\n    var a = [];\n    do {\n      if (\"fragment\" === (i = advance(d))) {\n        ignored();\n        a.push(fragmentDefinition());\n      } else if (null != (t = operationDefinition(i))) {\n        a.push(t);\n      } else {\n        throw error(\"Document\");\n      }\n    } while (r < e.length);\n    if (!n) {\n      var o;\n      return {\n        kind: \"Document\",\n        definitions: a,\n        set loc(e) {\n          o = e;\n        },\n        get loc() {\n          if (!o) {\n            o = {\n              start: 0,\n              end: e.length,\n              startToken: void 0,\n              endToken: void 0,\n              source: {\n                body: e,\n                name: \"graphql.web\",\n                locationOffset: {\n                  line: 1,\n                  column: 1\n                }\n              }\n            };\n          }\n          return o;\n        }\n      };\n    }\n    return {\n      kind: \"Document\",\n      definitions: a\n    };\n  }(e = \"string\" == typeof n.body ? n.body : n, i && i.noLocation);\n};\n\nexports.parseType = function parseType(n, i) {\n  e = \"string\" == typeof n.body ? n.body : n;\n  r = 0;\n  return type();\n};\n\nexports.parseValue = function parseValue(n, i) {\n  e = \"string\" == typeof n.body ? n.body : n;\n  r = 0;\n  ignored();\n  return value(!1);\n};\n\nexports.print = function print(e) {\n  v = \"\\n\";\n  return c[e.kind] ? c[e.kind](e) : \"\";\n};\n\nexports.printBlockString = printBlockString;\n\nexports.printString = printString;\n\nexports.valueFromASTUntyped = valueFromASTUntyped;\n\nexports.valueFromTypeNode = function valueFromTypeNode(e, r, n) {\n  if (\"Variable\" === e.kind) {\n    return n ? valueFromTypeNode(n[e.name.value], r, n) : void 0;\n  } else if (\"NonNullType\" === r.kind) {\n    return \"NullValue\" !== e.kind ? valueFromTypeNode(e, r, n) : void 0;\n  } else if (\"NullValue\" === e.kind) {\n    return null;\n  } else if (\"ListType\" === r.kind) {\n    if (\"ListValue\" === e.kind) {\n      var i = [];\n      for (var t = 0, a = e.values.length; t < a; t++) {\n        var o = valueFromTypeNode(e.values[t], r.type, n);\n        if (void 0 === o) {\n          return;\n        } else {\n          i.push(o);\n        }\n      }\n      return i;\n    }\n  } else if (\"NamedType\" === r.kind) {\n    switch (r.name.value) {\n     case \"Int\":\n     case \"Float\":\n     case \"String\":\n     case \"Bool\":\n      return r.name.value + \"Value\" === e.kind ? valueFromASTUntyped(e, n) : void 0;\n\n     default:\n      return valueFromASTUntyped(e, n);\n    }\n  }\n};\n\nexports.visit = function visit(e, r) {\n  var n = [];\n  var i = [];\n  try {\n    var t = function traverse(e, t, a) {\n      var o = !1;\n      var l = r[e.kind] && r[e.kind].enter || r[e.kind] || r.enter;\n      var u = l && l.call(r, e, t, a, i, n);\n      if (!1 === u) {\n        return e;\n      } else if (null === u) {\n        return null;\n      } else if (u === s) {\n        throw s;\n      } else if (u && \"string\" == typeof u.kind) {\n        o = u !== e;\n        e = u;\n      }\n      if (a) {\n        n.push(a);\n      }\n      var d;\n      var v = {\n        ...e\n      };\n      for (var c in e) {\n        i.push(c);\n        var f = e[c];\n        if (Array.isArray(f)) {\n          var p = [];\n          for (var g = 0; g < f.length; g++) {\n            if (null != f[g] && \"string\" == typeof f[g].kind) {\n              n.push(e);\n              i.push(g);\n              d = traverse(f[g], g, f);\n              i.pop();\n              n.pop();\n              if (null == d) {\n                o = !0;\n              } else {\n                o = o || d !== f[g];\n                p.push(d);\n              }\n            }\n          }\n          f = p;\n        } else if (null != f && \"string\" == typeof f.kind) {\n          if (void 0 !== (d = traverse(f, c, e))) {\n            o = o || f !== d;\n            f = d;\n          }\n        }\n        i.pop();\n        if (o) {\n          v[c] = f;\n        }\n      }\n      if (a) {\n        n.pop();\n      }\n      var m = r[e.kind] && r[e.kind].leave || r.leave;\n      var h = m && m.call(r, e, t, a, i, n);\n      if (h === s) {\n        throw s;\n      } else if (void 0 !== h) {\n        return h;\n      } else if (void 0 !== u) {\n        return o ? v : u;\n      } else {\n        return o ? v : e;\n      }\n    }(e);\n    return void 0 !== t && !1 !== t ? t : e;\n  } catch (r) {\n    if (r !== s) {\n      throw r;\n    }\n    return e;\n  }\n};\n//# sourceMappingURL=graphql.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../node_modules/.pnpm/@0no-co+graphql.web@1.0.12_graphql@16.10.0/node_modules/@0no-co/graphql.web/dist/graphql.web.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@0no-co+graphql.web@1.0.12_graphql@16.10.0/node_modules/@0no-co/graphql.web/dist/graphql.web.js":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@0no-co+graphql.web@1.0.12_graphql@16.10.0/node_modules/@0no-co/graphql.web/dist/graphql.web.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: !0\n}));\n\nclass GraphQLError extends Error {\n  constructor(e, r, n, i, t, a, o) {\n    super(e);\n    this.name = \"GraphQLError\";\n    this.message = e;\n    if (t) {\n      this.path = t;\n    }\n    if (r) {\n      this.nodes = Array.isArray(r) ? r : [ r ];\n    }\n    if (n) {\n      this.source = n;\n    }\n    if (i) {\n      this.positions = i;\n    }\n    if (a) {\n      this.originalError = a;\n    }\n    var l = o;\n    if (!l && a) {\n      var u = a.extensions;\n      if (u && \"object\" == typeof u) {\n        l = u;\n      }\n    }\n    this.extensions = l || {};\n  }\n  toJSON() {\n    return {\n      ...this,\n      message: this.message\n    };\n  }\n  toString() {\n    return this.message;\n  }\n  get [Symbol.toStringTag]() {\n    return \"GraphQLError\";\n  }\n}\n\nvar e;\n\nvar r;\n\nfunction error(e) {\n  return new GraphQLError(`Syntax Error: Unexpected token at ${r} in ${e}`);\n}\n\nfunction advance(n) {\n  n.lastIndex = r;\n  if (n.test(e)) {\n    return e.slice(r, r = n.lastIndex);\n  }\n}\n\nvar n = / +(?=[^\\s])/y;\n\nfunction blockString(e) {\n  var r = e.split(\"\\n\");\n  var i = \"\";\n  var t = 0;\n  var a = 0;\n  var o = r.length - 1;\n  for (var l = 0; l < r.length; l++) {\n    n.lastIndex = 0;\n    if (n.test(r[l])) {\n      if (l && (!t || n.lastIndex < t)) {\n        t = n.lastIndex;\n      }\n      a = a || l;\n      o = l;\n    }\n  }\n  for (var u = a; u <= o; u++) {\n    if (u !== a) {\n      i += \"\\n\";\n    }\n    i += r[u].slice(t).replace(/\\\\\"\"\"/g, '\"\"\"');\n  }\n  return i;\n}\n\nfunction ignored() {\n  for (var n = 0 | e.charCodeAt(r++); 9 === n || 10 === n || 13 === n || 32 === n || 35 === n || 44 === n || 65279 === n; n = 0 | e.charCodeAt(r++)) {\n    if (35 === n) {\n      while (10 !== (n = e.charCodeAt(r++)) && 13 !== n) {}\n    }\n  }\n  r--;\n}\n\nvar i = /[_A-Za-z]\\w*/y;\n\nvar t = new RegExp(\"(?:(null|true|false)|\\\\$(\" + i.source + ')|(-?\\\\d+)((?:\\\\.\\\\d+)?[eE][+-]?\\\\d+|\\\\.\\\\d+)?|(\"\"\"(?:\"\"\"|(?:[\\\\s\\\\S]*?[^\\\\\\\\])\"\"\"))|(\"(?:\"|[^\\\\r\\\\n]*?[^\\\\\\\\]\"))|(' + i.source + \"))\", \"y\");\n\nvar a = function(e) {\n  e[e.Const = 1] = \"Const\";\n  e[e.Var = 2] = \"Var\";\n  e[e.Int = 3] = \"Int\";\n  e[e.Float = 4] = \"Float\";\n  e[e.BlockString = 5] = \"BlockString\";\n  e[e.String = 6] = \"String\";\n  e[e.Enum = 7] = \"Enum\";\n  return e;\n}(a || {});\n\nvar o = /\\\\/;\n\nfunction value(n) {\n  var l;\n  var u;\n  t.lastIndex = r;\n  if (91 === e.charCodeAt(r)) {\n    r++;\n    ignored();\n    var d = [];\n    while (93 !== e.charCodeAt(r)) {\n      d.push(value(n));\n    }\n    r++;\n    ignored();\n    return {\n      kind: \"ListValue\",\n      values: d\n    };\n  } else if (123 === e.charCodeAt(r)) {\n    r++;\n    ignored();\n    var s = [];\n    while (125 !== e.charCodeAt(r)) {\n      if (null == (l = advance(i))) {\n        throw error(\"ObjectField\");\n      }\n      ignored();\n      if (58 !== e.charCodeAt(r++)) {\n        throw error(\"ObjectField\");\n      }\n      ignored();\n      s.push({\n        kind: \"ObjectField\",\n        name: {\n          kind: \"Name\",\n          value: l\n        },\n        value: value(n)\n      });\n    }\n    r++;\n    ignored();\n    return {\n      kind: \"ObjectValue\",\n      fields: s\n    };\n  } else if (null != (u = t.exec(e))) {\n    r = t.lastIndex;\n    ignored();\n    if (null != (l = u[a.Const])) {\n      return \"null\" === l ? {\n        kind: \"NullValue\"\n      } : {\n        kind: \"BooleanValue\",\n        value: \"true\" === l\n      };\n    } else if (null != (l = u[a.Var])) {\n      if (n) {\n        throw error(\"Variable\");\n      } else {\n        return {\n          kind: \"Variable\",\n          name: {\n            kind: \"Name\",\n            value: l\n          }\n        };\n      }\n    } else if (null != (l = u[a.Int])) {\n      var v;\n      if (null != (v = u[a.Float])) {\n        return {\n          kind: \"FloatValue\",\n          value: l + v\n        };\n      } else {\n        return {\n          kind: \"IntValue\",\n          value: l\n        };\n      }\n    } else if (null != (l = u[a.BlockString])) {\n      return {\n        kind: \"StringValue\",\n        value: blockString(l.slice(3, -3)),\n        block: !0\n      };\n    } else if (null != (l = u[a.String])) {\n      return {\n        kind: \"StringValue\",\n        value: o.test(l) ? JSON.parse(l) : l.slice(1, -1),\n        block: !1\n      };\n    } else if (null != (l = u[a.Enum])) {\n      return {\n        kind: \"EnumValue\",\n        value: l\n      };\n    }\n  }\n  throw error(\"Value\");\n}\n\nfunction arguments_(n) {\n  if (40 === e.charCodeAt(r)) {\n    var t = [];\n    r++;\n    ignored();\n    var a;\n    do {\n      if (null == (a = advance(i))) {\n        throw error(\"Argument\");\n      }\n      ignored();\n      if (58 !== e.charCodeAt(r++)) {\n        throw error(\"Argument\");\n      }\n      ignored();\n      t.push({\n        kind: \"Argument\",\n        name: {\n          kind: \"Name\",\n          value: a\n        },\n        value: value(n)\n      });\n    } while (41 !== e.charCodeAt(r));\n    r++;\n    ignored();\n    return t;\n  }\n}\n\nfunction directives(n) {\n  if (64 === e.charCodeAt(r)) {\n    var t = [];\n    var a;\n    do {\n      r++;\n      if (null == (a = advance(i))) {\n        throw error(\"Directive\");\n      }\n      ignored();\n      t.push({\n        kind: \"Directive\",\n        name: {\n          kind: \"Name\",\n          value: a\n        },\n        arguments: arguments_(n)\n      });\n    } while (64 === e.charCodeAt(r));\n    return t;\n  }\n}\n\nfunction type() {\n  var n;\n  var t = 0;\n  while (91 === e.charCodeAt(r)) {\n    t++;\n    r++;\n    ignored();\n  }\n  if (null == (n = advance(i))) {\n    throw error(\"NamedType\");\n  }\n  ignored();\n  var a = {\n    kind: \"NamedType\",\n    name: {\n      kind: \"Name\",\n      value: n\n    }\n  };\n  do {\n    if (33 === e.charCodeAt(r)) {\n      r++;\n      ignored();\n      a = {\n        kind: \"NonNullType\",\n        type: a\n      };\n    }\n    if (t) {\n      if (93 !== e.charCodeAt(r++)) {\n        throw error(\"NamedType\");\n      }\n      ignored();\n      a = {\n        kind: \"ListType\",\n        type: a\n      };\n    }\n  } while (t--);\n  return a;\n}\n\nvar l = new RegExp(\"(?:(\\\\.{3})|(\" + i.source + \"))\", \"y\");\n\nvar u = function(e) {\n  e[e.Spread = 1] = \"Spread\";\n  e[e.Name = 2] = \"Name\";\n  return e;\n}(u || {});\n\nfunction selectionSet() {\n  var n = [];\n  var t;\n  var a;\n  do {\n    l.lastIndex = r;\n    if (null != (a = l.exec(e))) {\n      r = l.lastIndex;\n      if (null != a[u.Spread]) {\n        ignored();\n        var o = advance(i);\n        if (null != o && \"on\" !== o) {\n          ignored();\n          n.push({\n            kind: \"FragmentSpread\",\n            name: {\n              kind: \"Name\",\n              value: o\n            },\n            directives: directives(!1)\n          });\n        } else {\n          ignored();\n          if (\"on\" === o) {\n            if (null == (o = advance(i))) {\n              throw error(\"NamedType\");\n            }\n            ignored();\n          }\n          var d = directives(!1);\n          if (123 !== e.charCodeAt(r++)) {\n            throw error(\"InlineFragment\");\n          }\n          ignored();\n          n.push({\n            kind: \"InlineFragment\",\n            typeCondition: o ? {\n              kind: \"NamedType\",\n              name: {\n                kind: \"Name\",\n                value: o\n              }\n            } : void 0,\n            directives: d,\n            selectionSet: selectionSet()\n          });\n        }\n      } else if (null != (t = a[u.Name])) {\n        var s = void 0;\n        ignored();\n        if (58 === e.charCodeAt(r)) {\n          r++;\n          ignored();\n          s = t;\n          if (null == (t = advance(i))) {\n            throw error(\"Field\");\n          }\n          ignored();\n        }\n        var v = arguments_(!1);\n        ignored();\n        var c = directives(!1);\n        var f = void 0;\n        if (123 === e.charCodeAt(r)) {\n          r++;\n          ignored();\n          f = selectionSet();\n        }\n        n.push({\n          kind: \"Field\",\n          alias: s ? {\n            kind: \"Name\",\n            value: s\n          } : void 0,\n          name: {\n            kind: \"Name\",\n            value: t\n          },\n          arguments: v,\n          directives: c,\n          selectionSet: f\n        });\n      }\n    } else {\n      throw error(\"SelectionSet\");\n    }\n  } while (125 !== e.charCodeAt(r));\n  r++;\n  ignored();\n  return {\n    kind: \"SelectionSet\",\n    selections: n\n  };\n}\n\nfunction fragmentDefinition() {\n  var n;\n  var t;\n  if (null == (n = advance(i))) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  if (\"on\" !== advance(i)) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  if (null == (t = advance(i))) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  var a = directives(!1);\n  if (123 !== e.charCodeAt(r++)) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  return {\n    kind: \"FragmentDefinition\",\n    name: {\n      kind: \"Name\",\n      value: n\n    },\n    typeCondition: {\n      kind: \"NamedType\",\n      name: {\n        kind: \"Name\",\n        value: t\n      }\n    },\n    directives: a,\n    selectionSet: selectionSet()\n  };\n}\n\nvar d = /(?:query|mutation|subscription|fragment)/y;\n\nfunction operationDefinition(n) {\n  var t;\n  var a;\n  var o;\n  if (n) {\n    ignored();\n    t = advance(i);\n    a = function variableDefinitions() {\n      ignored();\n      if (40 === e.charCodeAt(r)) {\n        var n = [];\n        r++;\n        ignored();\n        var t;\n        do {\n          if (36 !== e.charCodeAt(r++)) {\n            throw error(\"Variable\");\n          }\n          if (null == (t = advance(i))) {\n            throw error(\"Variable\");\n          }\n          ignored();\n          if (58 !== e.charCodeAt(r++)) {\n            throw error(\"VariableDefinition\");\n          }\n          ignored();\n          var a = type();\n          var o = void 0;\n          if (61 === e.charCodeAt(r)) {\n            r++;\n            ignored();\n            o = value(!0);\n          }\n          ignored();\n          n.push({\n            kind: \"VariableDefinition\",\n            variable: {\n              kind: \"Variable\",\n              name: {\n                kind: \"Name\",\n                value: t\n              }\n            },\n            type: a,\n            defaultValue: o,\n            directives: directives(!0)\n          });\n        } while (41 !== e.charCodeAt(r));\n        r++;\n        ignored();\n        return n;\n      }\n    }();\n    o = directives(!1);\n  }\n  if (123 === e.charCodeAt(r)) {\n    r++;\n    ignored();\n    return {\n      kind: \"OperationDefinition\",\n      operation: n || \"query\",\n      name: t ? {\n        kind: \"Name\",\n        value: t\n      } : void 0,\n      variableDefinitions: a,\n      directives: o,\n      selectionSet: selectionSet()\n    };\n  }\n}\n\nvar s = {};\n\nfunction mapJoin(e, r, n) {\n  var i = \"\";\n  for (var t = 0; t < e.length; t++) {\n    if (t) {\n      i += r;\n    }\n    i += n(e[t]);\n  }\n  return i;\n}\n\nfunction printString(e) {\n  return JSON.stringify(e);\n}\n\nfunction printBlockString(e) {\n  return '\"\"\"\\n' + e.replace(/\"\"\"/g, '\\\\\"\"\"') + '\\n\"\"\"';\n}\n\nvar v = \"\\n\";\n\nvar c = {\n  OperationDefinition(e) {\n    var r = e.operation;\n    if (e.name) {\n      r += \" \" + e.name.value;\n    }\n    if (e.variableDefinitions && e.variableDefinitions.length) {\n      if (!e.name) {\n        r += \" \";\n      }\n      r += \"(\" + mapJoin(e.variableDefinitions, \", \", c.VariableDefinition) + \")\";\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return \"query\" !== r ? r + \" \" + c.SelectionSet(e.selectionSet) : c.SelectionSet(e.selectionSet);\n  },\n  VariableDefinition(e) {\n    var r = c.Variable(e.variable) + \": \" + _print(e.type);\n    if (e.defaultValue) {\n      r += \" = \" + _print(e.defaultValue);\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return r;\n  },\n  Field(e) {\n    var r = e.alias ? e.alias.value + \": \" + e.name.value : e.name.value;\n    if (e.arguments && e.arguments.length) {\n      var n = mapJoin(e.arguments, \", \", c.Argument);\n      if (r.length + n.length + 2 > 80) {\n        r += \"(\" + (v += \"  \") + mapJoin(e.arguments, v, c.Argument) + (v = v.slice(0, -2)) + \")\";\n      } else {\n        r += \"(\" + n + \")\";\n      }\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    if (e.selectionSet && e.selectionSet.selections.length) {\n      r += \" \" + c.SelectionSet(e.selectionSet);\n    }\n    return r;\n  },\n  StringValue(e) {\n    if (e.block) {\n      return printBlockString(e.value).replace(/\\n/g, v);\n    } else {\n      return printString(e.value);\n    }\n  },\n  BooleanValue: e => \"\" + e.value,\n  NullValue: e => \"null\",\n  IntValue: e => e.value,\n  FloatValue: e => e.value,\n  EnumValue: e => e.value,\n  Name: e => e.value,\n  Variable: e => \"$\" + e.name.value,\n  ListValue: e => \"[\" + mapJoin(e.values, \", \", _print) + \"]\",\n  ObjectValue: e => \"{\" + mapJoin(e.fields, \", \", c.ObjectField) + \"}\",\n  ObjectField: e => e.name.value + \": \" + _print(e.value),\n  Document(e) {\n    if (!e.definitions || !e.definitions.length) {\n      return \"\";\n    }\n    return mapJoin(e.definitions, \"\\n\\n\", _print);\n  },\n  SelectionSet: e => \"{\" + (v += \"  \") + mapJoin(e.selections, v, _print) + (v = v.slice(0, -2)) + \"}\",\n  Argument: e => e.name.value + \": \" + _print(e.value),\n  FragmentSpread(e) {\n    var r = \"...\" + e.name.value;\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return r;\n  },\n  InlineFragment(e) {\n    var r = \"...\";\n    if (e.typeCondition) {\n      r += \" on \" + e.typeCondition.name.value;\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return r += \" \" + c.SelectionSet(e.selectionSet);\n  },\n  FragmentDefinition(e) {\n    var r = \"fragment \" + e.name.value;\n    r += \" on \" + e.typeCondition.name.value;\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", c.Directive);\n    }\n    return r + \" \" + c.SelectionSet(e.selectionSet);\n  },\n  Directive(e) {\n    var r = \"@\" + e.name.value;\n    if (e.arguments && e.arguments.length) {\n      r += \"(\" + mapJoin(e.arguments, \", \", c.Argument) + \")\";\n    }\n    return r;\n  },\n  NamedType: e => e.name.value,\n  ListType: e => \"[\" + _print(e.type) + \"]\",\n  NonNullType: e => _print(e.type) + \"!\"\n};\n\nvar _print = e => c[e.kind](e);\n\nfunction valueFromASTUntyped(e, r) {\n  switch (e.kind) {\n   case \"NullValue\":\n    return null;\n\n   case \"IntValue\":\n    return parseInt(e.value, 10);\n\n   case \"FloatValue\":\n    return parseFloat(e.value);\n\n   case \"StringValue\":\n   case \"EnumValue\":\n   case \"BooleanValue\":\n    return e.value;\n\n   case \"ListValue\":\n    var n = [];\n    for (var i = 0, t = e.values.length; i < t; i++) {\n      n.push(valueFromASTUntyped(e.values[i], r));\n    }\n    return n;\n\n   case \"ObjectValue\":\n    var a = Object.create(null);\n    for (var o = 0, l = e.fields.length; o < l; o++) {\n      var u = e.fields[o];\n      a[u.name.value] = valueFromASTUntyped(u.value, r);\n    }\n    return a;\n\n   case \"Variable\":\n    return r && r[e.name.value];\n  }\n}\n\nexports.BREAK = s;\n\nexports.GraphQLError = GraphQLError;\n\nexports.Kind = {\n  NAME: \"Name\",\n  DOCUMENT: \"Document\",\n  OPERATION_DEFINITION: \"OperationDefinition\",\n  VARIABLE_DEFINITION: \"VariableDefinition\",\n  SELECTION_SET: \"SelectionSet\",\n  FIELD: \"Field\",\n  ARGUMENT: \"Argument\",\n  FRAGMENT_SPREAD: \"FragmentSpread\",\n  INLINE_FRAGMENT: \"InlineFragment\",\n  FRAGMENT_DEFINITION: \"FragmentDefinition\",\n  VARIABLE: \"Variable\",\n  INT: \"IntValue\",\n  FLOAT: \"FloatValue\",\n  STRING: \"StringValue\",\n  BOOLEAN: \"BooleanValue\",\n  NULL: \"NullValue\",\n  ENUM: \"EnumValue\",\n  LIST: \"ListValue\",\n  OBJECT: \"ObjectValue\",\n  OBJECT_FIELD: \"ObjectField\",\n  DIRECTIVE: \"Directive\",\n  NAMED_TYPE: \"NamedType\",\n  LIST_TYPE: \"ListType\",\n  NON_NULL_TYPE: \"NonNullType\"\n};\n\nexports.OperationTypeNode = {\n  QUERY: \"query\",\n  MUTATION: \"mutation\",\n  SUBSCRIPTION: \"subscription\"\n};\n\nexports.Source = function Source(e, r, n) {\n  return {\n    body: e,\n    name: r,\n    locationOffset: n || {\n      line: 1,\n      column: 1\n    }\n  };\n};\n\nexports.isSelectionNode = function isSelectionNode(e) {\n  return \"Field\" === e.kind || \"FragmentSpread\" === e.kind || \"InlineFragment\" === e.kind;\n};\n\nexports.parse = function parse(n, i) {\n  r = 0;\n  return function document(e, n) {\n    var i;\n    var t;\n    ignored();\n    var a = [];\n    do {\n      if (\"fragment\" === (i = advance(d))) {\n        ignored();\n        a.push(fragmentDefinition());\n      } else if (null != (t = operationDefinition(i))) {\n        a.push(t);\n      } else {\n        throw error(\"Document\");\n      }\n    } while (r < e.length);\n    if (!n) {\n      var o;\n      return {\n        kind: \"Document\",\n        definitions: a,\n        set loc(e) {\n          o = e;\n        },\n        get loc() {\n          if (!o) {\n            o = {\n              start: 0,\n              end: e.length,\n              startToken: void 0,\n              endToken: void 0,\n              source: {\n                body: e,\n                name: \"graphql.web\",\n                locationOffset: {\n                  line: 1,\n                  column: 1\n                }\n              }\n            };\n          }\n          return o;\n        }\n      };\n    }\n    return {\n      kind: \"Document\",\n      definitions: a\n    };\n  }(e = \"string\" == typeof n.body ? n.body : n, i && i.noLocation);\n};\n\nexports.parseType = function parseType(n, i) {\n  e = \"string\" == typeof n.body ? n.body : n;\n  r = 0;\n  return type();\n};\n\nexports.parseValue = function parseValue(n, i) {\n  e = \"string\" == typeof n.body ? n.body : n;\n  r = 0;\n  ignored();\n  return value(!1);\n};\n\nexports.print = function print(e) {\n  v = \"\\n\";\n  return c[e.kind] ? c[e.kind](e) : \"\";\n};\n\nexports.printBlockString = printBlockString;\n\nexports.printString = printString;\n\nexports.valueFromASTUntyped = valueFromASTUntyped;\n\nexports.valueFromTypeNode = function valueFromTypeNode(e, r, n) {\n  if (\"Variable\" === e.kind) {\n    return n ? valueFromTypeNode(n[e.name.value], r, n) : void 0;\n  } else if (\"NonNullType\" === r.kind) {\n    return \"NullValue\" !== e.kind ? valueFromTypeNode(e, r, n) : void 0;\n  } else if (\"NullValue\" === e.kind) {\n    return null;\n  } else if (\"ListType\" === r.kind) {\n    if (\"ListValue\" === e.kind) {\n      var i = [];\n      for (var t = 0, a = e.values.length; t < a; t++) {\n        var o = valueFromTypeNode(e.values[t], r.type, n);\n        if (void 0 === o) {\n          return;\n        } else {\n          i.push(o);\n        }\n      }\n      return i;\n    }\n  } else if (\"NamedType\" === r.kind) {\n    switch (r.name.value) {\n     case \"Int\":\n     case \"Float\":\n     case \"String\":\n     case \"Bool\":\n      return r.name.value + \"Value\" === e.kind ? valueFromASTUntyped(e, n) : void 0;\n\n     default:\n      return valueFromASTUntyped(e, n);\n    }\n  }\n};\n\nexports.visit = function visit(e, r) {\n  var n = [];\n  var i = [];\n  try {\n    var t = function traverse(e, t, a) {\n      var o = !1;\n      var l = r[e.kind] && r[e.kind].enter || r[e.kind] || r.enter;\n      var u = l && l.call(r, e, t, a, i, n);\n      if (!1 === u) {\n        return e;\n      } else if (null === u) {\n        return null;\n      } else if (u === s) {\n        throw s;\n      } else if (u && \"string\" == typeof u.kind) {\n        o = u !== e;\n        e = u;\n      }\n      if (a) {\n        n.push(a);\n      }\n      var d;\n      var v = {\n        ...e\n      };\n      for (var c in e) {\n        i.push(c);\n        var f = e[c];\n        if (Array.isArray(f)) {\n          var p = [];\n          for (var g = 0; g < f.length; g++) {\n            if (null != f[g] && \"string\" == typeof f[g].kind) {\n              n.push(e);\n              i.push(g);\n              d = traverse(f[g], g, f);\n              i.pop();\n              n.pop();\n              if (null == d) {\n                o = !0;\n              } else {\n                o = o || d !== f[g];\n                p.push(d);\n              }\n            }\n          }\n          f = p;\n        } else if (null != f && \"string\" == typeof f.kind) {\n          if (void 0 !== (d = traverse(f, c, e))) {\n            o = o || f !== d;\n            f = d;\n          }\n        }\n        i.pop();\n        if (o) {\n          v[c] = f;\n        }\n      }\n      if (a) {\n        n.pop();\n      }\n      var m = r[e.kind] && r[e.kind].leave || r.leave;\n      var h = m && m.call(r, e, t, a, i, n);\n      if (h === s) {\n        throw s;\n      } else if (void 0 !== h) {\n        return h;\n      } else if (void 0 !== u) {\n        return o ? v : u;\n      } else {\n        return o ? v : e;\n      }\n    }(e);\n    return void 0 !== t && !1 !== t ? t : e;\n  } catch (r) {\n    if (r !== s) {\n      throw r;\n    }\n    return e;\n  }\n};\n//# sourceMappingURL=graphql.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@0no-co+graphql.web@1.0.12_graphql@16.10.0/node_modules/@0no-co/graphql.web/dist/graphql.web.js\n");

/***/ })

};
;